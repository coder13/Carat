#!/usr/bin/env node

var yargs = require('yargs')
	.usage("Usage: carat <file> [options]")
    .describe('r', "Recursive flag. Will recursively check required files. Default is false.")
    .describe('s', "Sink flag. Will list all the sinks in the program.")
    .describe('v', "Verbose flag. Will print all statements. Default is false.")
    .describe('d', "debug flag. Will output the file and line of the code being checked when an error is thrown")
    .alias('d', 'debug')
    .help('h')
    .alias('h', 'help')
    .showHelpOnFail(false);

var carat = require('../lib/carat.js'),
	fs = require('fs'),
	path = require('path'),
	chalk = require('chalk');

var args = yargs.argv;

carat.configure({
	recursive: !!args.r,
	debug: !!args.d,
	verbose: !!args.v,
	pretty: !!args.p,
	sinks: !!args.s,
	json: !!args.j
}, {
	Sources: [],
	Sinks: [],
	Callbacks: []
});

args._.map(file => path.resolve(file)).forEach(function (file) {
	if (!fs.existsSync(file)) {
		console.error(file, "doesn't exist.");
		process.exit(1);
	} else if (!fs.lstatSync(file).isFile()) {
		var pkgJson = require(file + '/package.json');
		if (pkgJson.main) {
			file += '/' + pkgJson.main;
		} else {
			file += '/index.js';
		}

		if (!fs.existsSync(file)) {
			console.error(file, "doesn't exist.");
			process.exit(1);
		} else if (!fs.lstatSync(file).isFile()) {
			console.error(file, "is a directory.");
			process.exit(1);
		}
	}

	fs.readFile(file, function (err, data) {
		if (err) {
			console.error(err);
		} else {
			console.log(chalk.yellow('-------------'), file);
			var checked = carat.check(String(data), file);
			var reports = checked.reports,
				sinks 	= checked.reportedSinks;
			if (carat.Flags.json) {
				var out = {};
				if (checked.reports)
					out.Reports = checked.reports;
				if (checked.reportedSinks && checked.reportedSinks.length != 0)
					out.ReportedSinks = checked.reportedSinks;
				console.log(JSON.stringify(out));
			} else {
				if (sinks && sinks.length != 0) {
					console.log(require('prettyjson').render({'Sinks': sinks}));
				}
				if (reports && reports.length != 0) {
					console.log(require('prettyjson').render({'Reports': reports}));
				} else {
					console.log(chalk.green('No vulneralbilities found'));
				}
			}
		}
	});
});

#!/usr/bin/env node
'use strict';

const yargs = require('yargs')
	.usage('Usage: carat <file> [options]')
    .describe('r', 'Recursive flag. Will recursively check required files. Default is false.')
    .describe('s', 'Sink flag. Will list all the sinks in the program.')
    .describe('v', 'Verbose flag. Will print all statements. Default is false.')
    .describe('d', 'debug flag. Will output the file and line of the code being checked when an error is thrown')
    .alias('d', 'debug')
    .help('h')
    .alias('h', 'help')
    .showHelpOnFail(false);

const chalk = require('chalk');
const fs = require('fs');
const path = require('path');

const traverse = require('./lib/traverse');
const query = require('../lib/query');
const utils = require('../lib/utils');

utils.debug('NODE_ENV:', config.getconfig.env);

const args = yargs.argv;

const options = {
	recursive: !!args.r,
	debug: !!args.d,
	verbose: !!args.v,
	pretty: !!args.p,
	sinks: !!args.s,
	json: !!args.j
};

let exitCode = 0;

const format = function (report) {
	console.log(chalk.red('vuln'), '\n', require('prettyjson').render({
		sink: {
			line: utils.pos(report.sink.node),
			code: utils.generate(report.sink.node)
		},
		source: {
			line: utils.pos(report.source.node),
			code: utils.generate(report.source.node)
		}
	}));
};

args._.map(file =>  utils.resolvePath(path.resolve(file))).forEach(function (file) {
	try {
		if (!file) {
			return;
		}

		var ast = utils.parseFile(file);
		if (ast) {
			let reports = [];

			console.log(chalk.yellow('----------------'), file);

			traverse(ast, options, file, function (report) {
				if (!options.json) {
					format(report);
					reports.push(report);

					if (!exitCode) {
						exitCode = reports.length > 1 ? 1 : 0;
					}
				}
			});

			if (reports.length === 0) {
				console.log(chalk.green('No vulneralbilities found'));
			}

		}
	} catch (e) {
		utils.error(e.stack);
	}
});
